name: Rust

on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always
  nightly: nightly

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-pc-windows-gnu
        components: clippy, rustfmt

    - name: Run checks
      env:
        CLIPPY_OPTS: --all-targets
      run: |
        cargo fmt --check
        cargo clippy $CLIPPY_OPTS
        cargo clippy --target x86_64-pc-windows-gnu $CLIPPY_OPTS

  test-win:
    runs-on: windows-latest
    strategy:
      matrix:
        target:
          - i686-pc-windows-gnu
          - i686-pc-windows-msvc
          - x86_64-pc-windows-gnu
          - x86_64-pc-windows-msvc
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable-${{ matrix.target }}

    - name: Run tests
      run: cargo test --all-features

  test-macos:
    runs-on: macos-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Run tests
      run: cargo test --all-features

  test-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - i686-unknown-linux-gnu
          - i686-unknown-linux-musl
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        target: ${{ matrix.target }}

    - name: Install multilib
      if: ${{ contains(matrix.target, 'i686-unknown-linux-') }}
      run: |
        sudo apt update -yqq
        sudo apt install gcc-multilib

    - name: Run tests
      run: cargo test --all-features --target ${{ matrix.target }}

  check-stub:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown

    - name: Run check
      run: cargo check --all-features --target wasm32-unknown-unknown

  test-msrv:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: 1.72.0
        profile: minimal
        override: true

    - name: Run tests
      run: cargo test --all-features
    # do not test, because dev-dependencies do not follow MSRV
    - name: Build
      run: cargo build --all-features
  docs:
    name: docs
    runs-on: ubuntu-latest 
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.nightly }}
          override: true
      - uses: Swatinem/rust-cache@v1
      - name: "doc --lib --all-features"
        run: cargo doc --lib --no-deps --all-features --document-private-items
        env:
          RUSTFLAGS: --cfg docsrs
          RUSTDOCFLAGS: --cfg docsrs -Dwarnings
        
  coverage:
    name: cargo tarpaulin
    runs-on: ubuntu-latest
    needs: 
      - check
      - test-win
      - test-linux
      - test-macos
      - check-stub
      - test-msrv
      - docs
    steps:
      - uses: actions/checkout@v3
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - uses: actions-rs/install@v0.1
        with:
          crate: cargo-tarpaulin
          version: latest
      - name: Cache ~/.cargo
        uses: actions/cache@v3
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-coverage-dotcargo
      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-coverage-cargo-build-target
      - name: Run tarpaulin
        uses: actions-rs/cargo@v1
        with:
          command: tarpaulin
          args: --run-types all-targets --workspace --out xml
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3.1.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
